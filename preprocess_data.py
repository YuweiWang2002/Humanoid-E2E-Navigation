"""
Data preprocessing script for the humanoid navigation task.

This script takes the CSV files generated by `generate_dummy_data.py`,
selects the final columns needed for training, and saves them to the
processed data directory.
"""

import os
import argparse
import pandas as pd

def main():
    """Main function to run the preprocessing."""
    parser = argparse.ArgumentParser(description="Preprocess raw humanoid navigation data.")
    parser.add_argument('--input_dir', type=str, default='data/raw',
                        help="Directory containing raw CSV files from generate_dummy_data.py. Defaults to 'data/raw'.")
    parser.add_argument('--output_dir', type=str, default='data/processed',
                        help="Directory to save processed CSV files. Defaults to 'data/processed'.")

    args = parser.parse_args()

    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)
        print(f"Created output directory: {args.output_dir}")

    # These are the columns required by the HumanoidNavDataset class
    final_columns = [
        'depth_filename',
        'rgb_filename',
        # --- 5D State Input ---
        'distance_to_target',
        'angle_to_target',
        'current_vel_x',
        'current_vel_y',
        'current_vel_yaw',
        # --- 3D Label Output ---
        'cmd_vel_x',
        'cmd_vel_y',
        'cmd_vel_yaw'
    ]

    print(f"Starting preprocessing from '{args.input_dir}' to '{args.output_dir}'.")

    for filename in os.listdir(args.input_dir):
        if filename.endswith('.csv'):
            input_path = os.path.join(args.input_dir, filename)
            output_path = os.path.join(args.output_dir, filename)
            
            print(f"Processing {filename}...")
            
            try:
                df = pd.read_csv(input_path)
                
                # Ensure all required columns exist
                missing_cols = [col for col in final_columns if col not in df.columns]
                if missing_cols:
                    print(f"  Warning: Skipping {filename} due to missing columns: {missing_cols}")
                    continue

                # Select and reorder columns
                df_processed = df[final_columns]
                
                # Save to the processed directory
                df_processed.to_csv(output_path, index=False)
                print(f"  Successfully saved to {output_path}")

            except Exception as e:
                print(f"  Error processing {filename}: {e}")

    print("\nPreprocessing complete.")

if __name__ == '__main__':
    main()